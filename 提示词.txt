# 新手用AI从0-1开发网站 - AI提示词
## 前端环境准备：
1. 本地电脑安装nodejs20+
   - https://nodejs.org/zh-cn/download
2. 新建文件夹ai-web-01（根据自己的需求命名，记得替换提示词中的文件夹名称）
   - 打开cursor后进入项目文件夹ai-web-01




solo提示词：
我要做一个物流计费管理系统，基于nodejs20+Vue3+vite+TypeScript
直接使用 Vite 模板，完全跳过交互，可以直接使用 Vite 的 Vue+TS 模板: npm init vite-init@latest -y . "--" --template vue-ts
物流计费是按地区、距离、重量、尺寸、数量等维度
要把前端网站加后台服务端全部做好


我要做一个跨境独立电商网站系统，基于nodejs20+Vue3+vite+TypeScript
直接使用 Vite 模板，完全跳过交互，可以直接使用 Vite 的 Vue+TS 模板: npm init vite-init@latest -y . "--" --template vue-ts

需要补充一些需求点，不同积分展示不同的等级，不同品类有不同折扣，接入会员体系，要支持跨境支付宝结算


我要做一个AI知识库的微信小程序，能够定位学生的位置，然后可以发送问题，让AI从知识库里找到答案，对话可以接入元宝API，
用uniapp开发微信小程序
用户使用场景：
比如询问AI，水票怎么购买，然后AI搜索知识库，发送水票的购买方式
做知识库要先搭建知识图谱，rag，输入智能体，知识验证智能体


商品详情页面，http://localhost:5173/product/1，宝贝大图加一个特效，鼠标滑过有个放大镜的效果


我要做一个知识分享的后台管理系统，基于nodejs20+Vue3+vite+TypeScript
直接使用 Vite 模板，完全跳过交互，可以直接使用 Vite 的 Vue+TS 模板: npm init vite-init@latest -y . "--" --template vue-ts
需求包含：圈子管理、帖子管理能够审核帖子、新闻管理、通知管理、用户管理能够封号




## 新建网站前端框架（前端AI程序员）

1. 新建项目框架
新建一个网站前端项目，基于nodejs20+Vue3+vite+TypeScript
- 直接使用 Vite 模板，完全跳过交互，可以直接使用 Vite 的 Vue+TS 模板: npm init vite-init@latest -y . "--" --template vue-ts
- 在该项目下的package.json中添加必要依赖，注意不要添加其他非必要依赖，一次性安装
- 要注意Vue Router 4中RouteRecordRaw的导入方式
- 在这一步里，请不要写与基础框架无关的页面，比如除了首页、404之外的其他页面。
- 检测是否安装node.js，如果未安装则安装，若已安装则无需再次安装
- 创建一个简洁的 README.md 文件，包含项目介绍和启动方法
- 确保代码是响应式的，不需要兼容移动端，所有页面默认是pc端页面
- 项目运行默认端口8000

2. 添加依赖
进入项目，在该项目下的package.json中添加以下依赖：
Element Plus、Vue Router、axios、echarts、mitt、vuex、vuex-along
   - 注意组件版本兼容性
   - 在这一步里，不要添加任何与基础框架无关的页面。

3. 创建布局
创建布局，需要包含以下组件：
Layout主组件，作为路由的父级容器，主组件内嵌套header组件、内容区router-view、footer组件
调整项目整体样式，整体宽度100%，header组件高度为60px，layout的内容区域根据设备自适应宽度（PC端1280px，移动端375px）
header内容区要添加导航栏，导航栏的宽度要略大于内容区宽度，让页面布局更加协调，导航项：主页、圈子、工具包、教程、问答、求职，设置活跃项的底部蓝色指示线
导航栏右侧添加搜索框并添加搜索按钮，新增"发布"和"登录"按钮，优化布局和间距
header组件、内容区、footer组件优化布局和间距
   - 用一个默认正方形图片作为logo，默认图片从这个网站引用https://picsum.photos/
   - 在这一步里，不要添加任何与基础框架无关的页面。



常见问题：运行项目后，如果首页内容不能完全展示，用以下提示词处理css冲突问题
移除vite项目下默认样式中的以下内容，解决css冲突问题：
1. 移除body元素上的display: flex和place-items: center属性
2. 移除#app元素上的text-align: center和padding属性
3. 确保全局样式不会干扰布局组件的正常显示
4. 提供一个干净的CSS基础，避免默认样式与自定义布局冲突





我想打造一个面向中国消费者的女装电商网站，整体风格参考 Zara 和 H&M。网站需要设计简洁现代，适配手机端浏览。核心页面包括：首页（包含轮播图、新品推荐、热销商品、新用户弹窗），注册登录页（用户可以使用邮箱、微信、支付宝注册登录）、商品列表页、商品详情页（展示商品图片、尺码信息和用户评价），购物流程包括：购物车、下单结算、支付（支持支付宝、微信支付、银行卡支付等主流方式）。在结算时填写收货地址，并查看历史订单。支持用户通过邮件方式联系官方。
整体视觉风格以黑白灰为主色调，搭配柔和的米色或深蓝色点缀，使用大图展示商品，页面布局简洁，交互动效自然流畅，使用风格统一的 icon 而不使用 emoji。尚未上线的页面请显示“敬请期待”的空状态。


## 新建后管平台网站前端框架（前端[后管平台网站]AI程序员）

1. 新建项目框架
新建一个后管平台网站项目，基于nodejs20+Vue3+vite+TypeScript
- 直接使用 Vite 模板，完全跳过交互，可以直接使用 Vite 的 Vue+TS 模板: npm init vite-init@latest -y . "--" --template vue-ts
- 在该项目下的package.json中添加必要依赖，注意不要添加其他非必要依赖，一次性安装
- 要注意Vue Router 4中RouteRecordRaw的导入方式
- 在这一步里，请不要写与基础框架无关的页面，比如除了首页、404之外的其他页面。
- 检测是否安装node.js，如果未安装则安装，若已安装则无需再次安装
- 创建一个简洁的 README.md 文件，包含项目介绍和启动方法
- 确保代码是响应式的，不需要兼容移动端，所有页面默认是pc端页面
- 项目运行默认端口8100

2. 添加依赖
进入项目，在该项目下的package.json中添加以下依赖：
Element Plus、Vue Router、axios、echarts、mitt、vuex、vuex-along
   - 注意组件版本兼容性
   - 在这一步里，不要添加任何与基础框架无关的页面。

3. 创建布局
参考设计图创建布局，需要包含以下组件：
Layout主组件，作为路由的父级容器，主组件内嵌套header组件、left菜单栏组件、右侧内容区router-view
   - 用一个默认正方形图片作为logo，默认图片从这个网站引用https://picsum.photos/

4. 加一个统计分析的菜单

加一个广告位管理的菜单，点击菜单以后，有个列表显示所有的广告位，有增删改查功能

加一个统计分析的菜单


## 开发页面
找对标站点的页面，截图当做设计图
把设计图发给cursor对话框，让cursor参考设计图的布局以及样式，创建页面
循环往复，直到完成所有页面
比如：
1. 根据这个设计图，做一个注册页面，做一个登录页面
2. 登录页面，点击立即注册按钮后，前往注册页面，参考这个设计图，新增一个注册页面，参考设计图的布局与样式
3. 参考这个设计图的布局与样式，修改首页以及header组件里的导航栏布局，不要修改导航项，我们的网站名是知识乐园
4. 根据新上传的这个设计图，修改 Home 页面的布局和样式，保持现有文字内容不变，同时保持 已有的header 导航栏组件不变。
5. 这个首页布局与样式还需要继续优化，参考我刚才给你的设计图，继续优化布局样式
6. 调整页面布局，让热门圈子模块占据所有宽度，并将圈子榜单放在热门圈子下方，与热门话题在同一行。
7. 从页面选中按钮，上传设计图后，告诉cursor对话框：点击我的圈子按钮，进入我的圈子页面。新增我的圈子页面，根据设计图页面布局，造一些假数据显示到各个模块，先不要写业务逻辑代码
8. 调整一下这个圈子管理后台的卡片，这个卡片改为我创建的圈子，能够显示圈子成员总数以及帖子总数，并且有个文字链接圈子管理后台。
9. 添加一个新建圈子按钮和对应的模态框，参考设计图实现两步创建流程。
10. 点击这个圈子按钮，跳转到圈子页面，新增一个圈子页面，根据设计图写这个圈子页面

根据登录页面的风格，新建一个注册页面。登录页面点击立即注册按钮跳转到注册页面


根据页面分析接口列表：
1. 注册接口
2. 登录接口
1. 获取圈子列表接口   
2. 根据圈子类型获取学习榜单接口
3. 创建圈子的接口
4. 获取圈子详情接口
5. 获取圈子评论列表接口
6. 获取圈子主题列表接口
7. 立即加入圈子接口
8. 获取圈子成员列表接口
9. 圈子成员关注（取关）接口列表
10. 新增圈子主题点赞接口
11. 新增圈子主题评论接口
12. 新增圈子主题接口
13. 获取圈子主题评论列表接口
14. 上传图片接口
15. 上传附件接口

16. 获取热门话题列表接口




## 让AI设计数据库建表（可以用deepseek，节省cursor余额）
1. AI新建表
create建表语句

我们现在做圈子类、知识分享的app，需要设计一个会员用户表，给我写一个mysql的建表语句

我们现在做圈子类、知识分享的app，需要设计一个管理员用户表，给我写一个mysql的建表语句

我们现在做圈子类、知识分享的app，需要设计一个广告位表，给我写一个mysql的建表语句，主要字段包括广告位名称、广告位编码，尺寸，描述，状态

我们现在做圈子类、知识分享的app，需要设计一个圈子分类表，给我写一个mysql的建表语句，建一个圈子分类表，主要字段包括名称、描述、图标、父类id、分类层级、创建时间、更新时间、创建用户

我现在要建一个表，mysql数据库，叫圈子主题表，主要字段包括类型、标题、简介、内容、图片、创建时间、更新时间、状态、作者、作者ID、作者名称

我现在要建一个表，叫圈子表，主要字段包括圈子分类、圈子类型（公开、私密）、圈子名称、封面、圈子简介、内容介绍、价格、年费类型、创建时间、更新时间、状态、作者、作者ID、作者名称

我现在要建一个表，叫圈子排行榜单表，主要字段包括圈子分类、圈子id以及圈子相关一些可以冗余的字段，还有排行相关的字段

我们现在做圈子类、知识分享的app，需要设计登录注册功能，给我写一个mysql的建表语句，建一个用户表

我们现在做圈子类、知识分享的app，需要设计一个话题表，给我写一个mysql的建表语句



2.AI初始化测试数据
生成10条测试数据的初始化表语句


## 后台开发前准备：
环境准备：
1. 本地电脑安装mysql数据库，用户名:root，密码:rootroot
2. 新建一个数据库，名称：learning_happy_paradise

## 开发后台服务端（后端AI程序员）
1. 新建后台服务端框架
新建一个后台服务API项目，基于nodejs20+nodemon+Express+Mysql+JWT
- 包管理器用pnpm，配置淘宝镜像源
- 在该项目下的package.json中添加必要依赖，注意不要添加其他非必要依赖，一次性安装
- 项目运行默认端口4000
- 项目搭建好后需要运行npm install命令安装依赖
- 数据库已经建好，不需要初始化数据库的脚本
- mysql数据库连接信息，用户名:root，密码:rootroot，数据库名：learning_happy_paradise
- 项目启动以后，需要连接数据库，验证数据库正常连接，并且打印数据库连接结果日志，查出数据库里有哪些表，打印出来表名
- 不要集成Sequelize组件

2. 框架集成以下功能
错误处理
日志记录(Winston)，关键位置加日志打印方便调试
文件上传(Multer)
安全头部设置(Helmet)


3. 特殊处理，防止token过长导致AI对话中断影响效果
API速率限制，同一个接口1分钟内最多10次，开发测试环境不限制
跨域资源共享(CORS)，允许所有来源网站的跨域请求
后台接口返回的请求成功状态码必须是200
新增.env配置文件，区分当前运行环境，包括开发、测试、生产环境，运行npm run dev时，需要指定当前env的环境


## 写后台接口

1. 新建注册接口
新增一个注册接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
接口请求字段，可以参考这个表结构
CREATE TABLE `users` (
  `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户ID，主键',
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户名，用于登录和显示',
  `email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '电子邮箱，用于登录和通知',
  `mobile` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '手机号码，用于登录和验证',
  `password_hash` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '加密后的密码',
  `salt` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '密码加密盐值',
  `avatar_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '头像URL',
  `nickname` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `bio` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '个人简介',
  `gender` tinyint(4) DEFAULT '0' COMMENT '性别：0-未知 1-男 2-女',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '账号状态：0-禁用 1-正常 2-未激活',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '最后登录IP',
  `register_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '注册时间',
  `register_ip` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '注册IP',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_verified` tinyint(4) DEFAULT '0' COMMENT '是否认证：0-未认证 1-已认证',
  `verification_code` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '邮箱/手机验证码',
  `verification_expire` datetime DEFAULT NULL COMMENT '验证码过期时间',
  `role` tinyint(4) DEFAULT '1' COMMENT '用户角色：1-普通用户 2-内容创作者 3-管理员',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `idx_username` (`username`),
  UNIQUE KEY `idx_email` (`email`),
  KEY `idx_mobile` (`mobile`),
  KEY `idx_status` (`status`),
  KEY `idx_register_time` (`register_time`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户表'


2. 新建会员用户登录接口
新建会员用户登录接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
这个接口不需要身份验证，不需要加身份验证的逻辑
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `users` (
  `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户ID，主键',
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户名，用于登录和显示',
  `email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '电子邮箱，用于登录和通知',
  `mobile` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '手机号码，用于登录和验证',
  `password_hash` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '加密后的密码',
  `salt` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '密码加密盐值',
  `avatar_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '头像URL',
  `nickname` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `bio` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '个人简介',
  `gender` tinyint(4) DEFAULT '0' COMMENT '性别：0-未知 1-男 2-女',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '账号状态：0-禁用 1-正常 2-未激活',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '最后登录IP',
  `register_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '注册时间',
  `register_ip` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '注册IP',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_verified` tinyint(4) DEFAULT '0' COMMENT '是否认证：0-未认证 1-已认证',
  `verification_code` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '邮箱/手机验证码',
  `verification_expire` datetime DEFAULT NULL COMMENT '验证码过期时间',
  `role` tinyint(4) DEFAULT '1' COMMENT '用户角色：1-普通用户 2-内容创作者 3-管理员',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `idx_username` (`username`),
  UNIQUE KEY `idx_email` (`email`),
  KEY `idx_mobile` (`mobile`),
  KEY `idx_status` (`status`),
  KEY `idx_register_time` (`register_time`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户表'

重要：当表结构有变动的时候，需要用这个提示词：
修改这个普通该用户登录接口，参考的表结构有变化，CREATE TABLE `users` (
  `user_id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '用户ID，主键',
  `username` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '用户名，用于登录和显示',
  `email` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '电子邮箱，用于登录和通知',
  `mobile` varchar(20) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '手机号码，用于登录和验证',
  `password_hash` varchar(255) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '加密后的密码',
  `salt` varchar(100) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '密码加密盐值',
  `avatar_url` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '头像URL',
  `nickname` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '用户昵称',
  `bio` varchar(200) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '个人简介',
  `gender` tinyint(4) DEFAULT '0' COMMENT '性别：0-未知 1-男 2-女',
  `birthday` date DEFAULT NULL COMMENT '生日',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '账号状态：0-禁用 1-正常 2-未激活',
  `last_login_time` datetime DEFAULT NULL COMMENT '最后登录时间',
  `last_login_ip` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '最后登录IP',
  `register_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '注册时间',
  `register_ip` varchar(50) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '注册IP',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `is_verified` tinyint(4) DEFAULT '0' COMMENT '是否认证：0-未认证 1-已认证',
  `verification_code` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '邮箱/手机验证码',
  `verification_expire` datetime DEFAULT NULL COMMENT '验证码过期时间',
  `role` tinyint(4) DEFAULT '1' COMMENT '用户角色：1-普通用户 2-内容创作者 3-管理员',
  PRIMARY KEY (`user_id`),
  UNIQUE KEY `idx_username` (`username`),
  UNIQUE KEY `idx_email` (`email`),
  KEY `idx_mobile` (`mobile`),
  KEY `idx_status` (`status`),
  KEY `idx_register_time` (`register_time`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='用户表'




2. 新建管理员用户登录接口
新建管理员用户登录接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
写接口的时候，要生成一条测试的管理员用户数据，初始化到数据库管理员用户表里
这个接口不需要身份验证，不需要加身份验证的逻辑
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `admin_user` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '管理员唯一ID',
  `username` VARCHAR(50) NOT NULL COMMENT '登录用户名',
  `password_hash` CHAR(64) NOT NULL COMMENT 'SHA-256加密的密码',
  `salt` CHAR(16) NOT NULL COMMENT '密码加密盐值',
  `real_name` VARCHAR(20) NOT NULL DEFAULT '' COMMENT '真实姓名',
  `mobile` VARCHAR(15) NOT NULL DEFAULT '' COMMENT '手机号',
  `email` VARCHAR(100) NOT NULL DEFAULT '' COMMENT '邮箱',
  `role_type` ENUM('super', 'content', 'user', 'audit') NOT NULL DEFAULT 'content' COMMENT '角色类型: super-超级管理员, content-内容管理, user-用户管理, audit-审核管理',
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '状态: 0-禁用, 1-启用',
  `last_login_ip` VARCHAR(45) NOT NULL DEFAULT '' COMMENT '最后登录IP',
  `last_login_time` DATETIME DEFAULT NULL COMMENT '最后登录时间',
  `create_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `operator_id` INT UNSIGNED DEFAULT NULL COMMENT '操作人ID（记录最后修改者）',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_username` (`username`),
  KEY `idx_role_status` (`role_type`, `status`),
  KEY `idx_mobile` (`mobile`),
  KEY `idx_email` (`email`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='管理员用户表';



后台管理系统获取广告位列表接口：
新建获取广告位列表接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
根据创建时间倒序排序
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `ad_position` (
  `id` INT UNSIGNED NOT NULL AUTO_INCREMENT COMMENT '广告位ID',
  `position_code` VARCHAR(50) NOT NULL COMMENT '广告位编码(唯一业务标识)',
  `position_name` VARCHAR(100) NOT NULL COMMENT '广告位名称',
  `width` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT '广告位宽度(像素)',
  `height` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT '广告位高度(像素)',
  `description` VARCHAR(255) NOT NULL DEFAULT '' COMMENT '广告位描述',
  `platform` ENUM('all', 'android', 'ios', 'web') NOT NULL DEFAULT 'all' COMMENT '投放平台',
  `location` VARCHAR(50) NOT NULL DEFAULT '' COMMENT '页面位置(如：首页轮播/圈子详情页/文章底部)',
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT '状态: 0-禁用, 1-启用, 2-维护中',
  `max_count` TINYINT UNSIGNED NOT NULL DEFAULT 1 COMMENT '最大广告数量(0表示不限制)',
  `style_type` VARCHAR(30) NOT NULL DEFAULT 'image' COMMENT '广告样式: image-图片, video-视频, text-文字',
  `create_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `operator_id` INT UNSIGNED DEFAULT NULL COMMENT '最后操作人ID',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uniq_position_code` (`position_code`),
  KEY `idx_platform_status` (`platform`, `status`),
  KEY `idx_location` (`location`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='广告位配置表';



获取热门圈子推荐列表接口：
新建热门圈子推荐列表接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
根据热度评分排序
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `circle_rank` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `category_id` bigint(20) NOT NULL COMMENT '圈子分类ID',
  `category_name` varchar(50) NOT NULL COMMENT '圈子分类名称',
  `circle_id` bigint(20) NOT NULL COMMENT '圈子ID',
  `circle_name` varchar(100) NOT NULL COMMENT '圈子名称(冗余)',
  `circle_cover` varchar(255) DEFAULT NULL COMMENT '圈子封面(冗余)',
  `circle_intro` varchar(500) DEFAULT NULL COMMENT '圈子简介(冗余)',
  `author_name` varchar(50) DEFAULT NULL COMMENT '作者名称(冗余)',
  `heat_score` decimal(10,2) DEFAULT '0.00' COMMENT '热度评分',
  `member_count` int(11) DEFAULT '0' COMMENT '成员数量',
  `post_count` int(11) DEFAULT '0' COMMENT '帖子数量',
  `like_count` int(11) DEFAULT '0' COMMENT '点赞数量',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论数量',
  `view_count` int(11) DEFAULT '0' COMMENT '浏览数量',
  `activity_score` decimal(10,2) DEFAULT '0.00' COMMENT '活跃度评分',
  `rank_position` int(11) DEFAULT '0' COMMENT '当前排名位置',
  `rank_change` int(11) DEFAULT '0' COMMENT '排名变化(相比上次)',
  `rank_type` tinyint(4) NOT NULL COMMENT '排行榜类型:1-总榜,2-分类榜,3-新人榜,4-飙升榜等',
  `rank_date` date NOT NULL COMMENT '排行榜日期',
  `rank_time` datetime NOT NULL COMMENT '排行榜生成时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_rank_record` (`circle_id`,`rank_type`,`rank_date`),
  KEY `idx_category` (`category_id`),
  KEY `idx_rank_type` (`rank_type`),
  KEY `idx_rank_date` (`rank_date`),
  KEY `idx_heat_score` (`heat_score`),
  KEY `idx_rank_position` (`rank_position`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='圈子排行榜单表'


获取热门话题列表接口：
新建热门话题列表接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
根据排序权重排序
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `circle_topics` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主题ID',
  `circle_id` bigint(20) NOT NULL COMMENT '所属圈子ID',
  `category_id` bigint(20) DEFAULT NULL COMMENT '关联的圈子分类ID',
  `topic_name` varchar(100) NOT NULL COMMENT '主题名称',
  `topic_description` varchar(500) DEFAULT NULL COMMENT '主题描述',
  `topic_icon` varchar(255) DEFAULT NULL COMMENT '主题图标URL',
  `parent_topic_id` bigint(20) DEFAULT NULL COMMENT '父主题ID（支持主题嵌套）',
  `topic_level` tinyint(4) NOT NULL DEFAULT '1' COMMENT '主题级别：1-普通，2-精华，3-置顶精华',
  `topic_content` text COMMENT '主题内容',
  `is_sticky` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶：0-否，1-是',
  `sticky_expire_time` datetime DEFAULT NULL COMMENT '置顶过期时间',
  `sort_order` int(11) DEFAULT '0' COMMENT '排序权重',
  `recommend_weight` int(11) DEFAULT '0' COMMENT '推荐权重（人工干预值）',
  `post_count` int(11) DEFAULT '0' COMMENT '主题下帖子数量',
  `view_count` bigint(20) DEFAULT '0' COMMENT '主题总浏览量',
  `follower_count` int(11) DEFAULT '0' COMMENT '关注人数',
  `last_post_time` datetime DEFAULT NULL COMMENT '最后发帖时间',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-启用，2-热门，3-推荐',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `creator_id` bigint(20) DEFAULT NULL COMMENT '创建人ID',
  `last_editor_id` bigint(20) DEFAULT NULL COMMENT '最后编辑人ID',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_circle_topic` (`circle_id`,`topic_name`),
  KEY `idx_circle_id` (`circle_id`),
  KEY `idx_category_id` (`category_id`),
  KEY `idx_parent_topic_id` (`parent_topic_id`),
  KEY `idx_topic_level` (`topic_level`),
  KEY `idx_is_sticky` (`is_sticky`),
  KEY `idx_status` (`status`),
  KEY `idx_sort_order` (`sort_order`),
  KEY `idx_recommend_weight` (`recommend_weight`),
  KEY `idx_last_post_time` (`last_post_time`),
  CONSTRAINT `fk_topics_category` FOREIGN KEY (`category_id`) REFERENCES `circle_category` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_topics_circle` FOREIGN KEY (`circle_id`) REFERENCES `circle` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8mb4 COMMENT='圈子主题表'


根据圈子id获取圈子话题列表接口：
新建热门话题列表接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
根据创建时间逆序排序
接口强求字段，需要用到圈子id
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `circle_topics` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主题ID',
  `circle_id` bigint(20) NOT NULL COMMENT '所属圈子ID',
  `category_id` bigint(20) DEFAULT NULL COMMENT '关联的圈子分类ID',
  `topic_name` varchar(100) NOT NULL COMMENT '主题名称',
  `topic_description` varchar(500) DEFAULT NULL COMMENT '主题描述',
  `topic_icon` varchar(255) DEFAULT NULL COMMENT '主题图标URL',
  `parent_topic_id` bigint(20) DEFAULT NULL COMMENT '父主题ID（支持主题嵌套）',
  `topic_level` tinyint(4) NOT NULL DEFAULT '1' COMMENT '主题级别：1-普通，2-精华，3-置顶精华',
  `topic_content` text COMMENT '主题内容',
  `is_sticky` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶：0-否，1-是',
  `sticky_expire_time` datetime DEFAULT NULL COMMENT '置顶过期时间',
  `sort_order` int(11) DEFAULT '0' COMMENT '排序权重',
  `recommend_weight` int(11) DEFAULT '0' COMMENT '推荐权重（人工干预值）',
  `post_count` int(11) DEFAULT '0' COMMENT '主题下帖子数量',
  `view_count` bigint(20) DEFAULT '0' COMMENT '主题总浏览量',
  `follower_count` int(11) DEFAULT '0' COMMENT '关注人数',
  `last_post_time` datetime DEFAULT NULL COMMENT '最后发帖时间',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-启用，2-热门，3-推荐',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `creator_id` bigint(20) DEFAULT NULL COMMENT '创建人ID',
  `last_editor_id` bigint(20) DEFAULT NULL COMMENT '最后编辑人ID',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_circle_topic` (`circle_id`,`topic_name`),
  KEY `idx_circle_id` (`circle_id`),
  KEY `idx_category_id` (`category_id`),
  KEY `idx_parent_topic_id` (`parent_topic_id`),
  KEY `idx_topic_level` (`topic_level`),
  KEY `idx_is_sticky` (`is_sticky`),
  KEY `idx_status` (`status`),
  KEY `idx_sort_order` (`sort_order`),
  KEY `idx_recommend_weight` (`recommend_weight`),
  KEY `idx_last_post_time` (`last_post_time`),
  CONSTRAINT `fk_topics_category` FOREIGN KEY (`category_id`) REFERENCES `circle_category` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_topics_circle` FOREIGN KEY (`circle_id`) REFERENCES `circle` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8mb4 COMMENT='圈子主题表'


修改/api/circles/topics/list接口，现在的请求字段保留{
  "circle_id": 22,                 /* 圈子ID（必填） */
  "page": 1,                     /* 页码，默认为1 */
  "pageSize": 10                /* 每页数量，默认为10，最大100 */
}，但是还要加几个参数，使接口能够满足以下要求，能够查询最新、热门、精华的帖子，修改完成后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。


新建获取圈子分类列表接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
这个接口不需要身份验证，不需要加身份验证的逻辑
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `circle_category` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '分类ID',
  `name` varchar(50) COLLATE utf8mb4_unicode_ci NOT NULL COMMENT '分类名称',
  `description` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '分类描述',
  `icon` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '分类图标URL',
  `cover_image` varchar(255) COLLATE utf8mb4_unicode_ci DEFAULT NULL COMMENT '分类封面图URL',
  `parent_id` bigint(20) DEFAULT '0' COMMENT '父分类ID，0表示一级分类',
  `level` tinyint(4) DEFAULT '1' COMMENT '分类层级：1-一级分类，2-二级分类',
  `sort_order` int(11) DEFAULT '0' COMMENT '排序权重，数字越大越靠前',
  `status` tinyint(4) DEFAULT '1' COMMENT '状态：0-禁用，1-启用',
  `circle_count` int(11) DEFAULT '0' COMMENT '该分类下的圈子数量',
  `created_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `updated_at` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `created_by` bigint(20) DEFAULT NULL COMMENT '创建人ID',
  `updated_by` bigint(20) DEFAULT NULL COMMENT '更新人ID',
  `is_deleted` tinyint(1) DEFAULT '0' COMMENT '是否删除：0-未删除，1-已删除',
  PRIMARY KEY (`id`),
  KEY `idx_parent_id` (`parent_id`),
  KEY `idx_sort_order` (`sort_order`),
  KEY `idx_status` (`status`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci COMMENT='圈子分类表'


新建一个创建圈子的接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
需要身份验证，加身份验证的逻辑
请求字段参考如下表结构字段以及注释内容：
CREATE TABLE `circle` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '圈子ID，主键',
  `category_id` bigint(20) NOT NULL COMMENT '圈子分类ID',
  `category_name` varchar(50) NOT NULL COMMENT '圈子分类名称',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '圈子类型：1-公开，2-私密',
  `name` varchar(100) NOT NULL COMMENT '圈子名称',
  `cover` varchar(255) DEFAULT NULL COMMENT '封面图片URL',
  `introduction` varchar(500) DEFAULT NULL COMMENT '圈子简介',
  `content_description` text COMMENT '内容详细介绍',
  `price` decimal(10,2) DEFAULT '0.00' COMMENT '价格',
  `annual_fee_type` tinyint(4) DEFAULT NULL COMMENT '年费类型：1-免费，2-年费，3-月费，4-一次性付费',
  `create_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间',
  `update_time` datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-正常，2-审核中，3-已删除',
  `author_id` bigint(20) NOT NULL COMMENT '作者ID',
  `author_name` varchar(50) NOT NULL COMMENT '作者名称',
  `member_count` int(11) DEFAULT '0' COMMENT '成员数量（可选）',
  `post_count` int(11) DEFAULT '0' COMMENT '帖子数量（可选）',
  PRIMARY KEY (`id`),
  KEY `idx_category` (`category_id`),
  KEY `idx_author` (`author_id`),
  KEY `idx_status` (`status`),
  KEY `idx_create_time` (`create_time`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='圈子表'

在开发过程中，circle_members表也记录加入圈子的用户信息也要记录圈子主人的信息，所以修改新建圈子接口，保存创建者信息以及圈子信息到circle_members表
新建圈子接口/api/circles/create需要修改一下业务逻辑，新增圈子时，要先保存圈子信息，然后保存创建者信息以及圈子信息到circle_members表


新建一个加入圈子的接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
需要身份验证，加身份验证的逻辑
请求字段参考如下表结构字段以及注释内容：
CREATE TABLE `circle_members` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `circle_id` bigint(20) NOT NULL COMMENT '圈子ID',
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `join_time` datetime NOT NULL COMMENT '加入时间',
  `role` tinyint(4) NOT NULL DEFAULT '1' COMMENT '用户角色：1-普通成员，2-管理员，3-圈主',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-已退出，1-正常，2-禁言，3-待审核，4-已封禁',
  `last_active_time` datetime DEFAULT NULL COMMENT '最后活跃时间',
  `expire_time` datetime DEFAULT NULL COMMENT '会员到期时间',
  `join_source` tinyint(4) DEFAULT NULL COMMENT '加入来源：1-搜索，2-邀请，3-推荐，4-系统添加',
  `inviter_id` bigint(20) DEFAULT NULL COMMENT '邀请人ID',
  `points` int(11) DEFAULT '0' COMMENT '圈子积分',
  `level` int(11) DEFAULT '1' COMMENT '会员等级',
  `level_progress` int(11) DEFAULT '0' COMMENT '等级进度',
  `reason_text` varchar(500) DEFAULT NULL COMMENT '封禁原因/审核意见',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_circle_user` (`circle_id`,`user_id`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_status` (`status`),
  KEY `idx_join_time` (`join_time`),
  KEY `idx_join_source` (`join_source`),
  CONSTRAINT `fk_members_circle` FOREIGN KEY (`circle_id`) REFERENCES `circle` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COMMENT='圈子成员关联表'


新建一个退出圈子的接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
需要身份验证，加身份验证的逻辑，圈主不允许退出圈子，并且要新增一个操作记录表能够记录退出圈子的记录
参考如下表结构字段以及注释内容：
CREATE TABLE `circle_members` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `circle_id` bigint(20) NOT NULL COMMENT '圈子ID',
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `join_time` datetime NOT NULL COMMENT '加入时间',
  `role` tinyint(4) NOT NULL DEFAULT '1' COMMENT '用户角色：1-普通成员，2-管理员，3-圈主',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-已退出，1-正常，2-禁言，3-待审核，4-已封禁',
  `last_active_time` datetime DEFAULT NULL COMMENT '最后活跃时间',
  `expire_time` datetime DEFAULT NULL COMMENT '会员到期时间',
  `join_source` tinyint(4) DEFAULT NULL COMMENT '加入来源：1-搜索，2-邀请，3-推荐，4-系统添加',
  `inviter_id` bigint(20) DEFAULT NULL COMMENT '邀请人ID',
  `points` int(11) DEFAULT '0' COMMENT '圈子积分',
  `level` int(11) DEFAULT '1' COMMENT '会员等级',
  `level_progress` int(11) DEFAULT '0' COMMENT '等级进度',
  `reason_text` varchar(500) DEFAULT NULL COMMENT '封禁原因/审核意见',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_circle_user` (`circle_id`,`user_id`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_status` (`status`),
  KEY `idx_join_time` (`join_time`),
  KEY `idx_join_source` (`join_source`),
  CONSTRAINT `fk_members_circle` FOREIGN KEY (`circle_id`) REFERENCES `circle` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8mb4 COMMENT='圈子成员关联表'


新建一个获取我的圈子列表的接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
需要身份验证，加身份验证的逻辑，如果无有效用户身份，则默认返回空数据



新建一个新增帖子的接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
需要身份验证，加身份验证的逻辑
请求字段参考如下表结构字段以及注释内容：
CREATE TABLE `circle_topics` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主题ID',
  `circle_id` bigint(20) NOT NULL COMMENT '所属圈子ID',
  `category_id` bigint(20) DEFAULT NULL COMMENT '关联的圈子分类ID',
  `topic_name` varchar(100) NOT NULL COMMENT '主题名称',
  `topic_description` varchar(500) DEFAULT NULL COMMENT '主题描述',
  `topic_icon` varchar(255) DEFAULT NULL COMMENT '主题图标URL',
  `parent_topic_id` bigint(20) DEFAULT NULL COMMENT '父主题ID（支持主题嵌套）',
  `topic_level` tinyint(4) NOT NULL DEFAULT '1' COMMENT '主题级别：1-普通，2-精华，3-置顶精华',
  `topic_content` text COMMENT '主题内容',
  `is_sticky` tinyint(1) NOT NULL DEFAULT '0' COMMENT '是否置顶：0-否，1-是',
  `sticky_expire_time` datetime DEFAULT NULL COMMENT '置顶过期时间',
  `sort_order` int(11) DEFAULT '0' COMMENT '排序权重',
  `recommend_weight` int(11) DEFAULT '0' COMMENT '推荐权重（人工干预值）',
  `post_count` int(11) DEFAULT '0' COMMENT '主题下帖子数量',
  `view_count` bigint(20) DEFAULT '0' COMMENT '主题总浏览量',
  `follower_count` int(11) DEFAULT '0' COMMENT '关注人数',
  `last_post_time` datetime DEFAULT NULL COMMENT '最后发帖时间',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-启用，2-热门，3-推荐',
  `create_time` datetime NOT NULL COMMENT '创建时间',
  `update_time` datetime NOT NULL COMMENT '更新时间',
  `creator_id` bigint(20) DEFAULT NULL COMMENT '创建人ID',
  `last_editor_id` bigint(20) DEFAULT NULL COMMENT '最后编辑人ID',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_circle_topic` (`circle_id`,`topic_name`),
  KEY `idx_circle_id` (`circle_id`),
  KEY `idx_category_id` (`category_id`),
  KEY `idx_parent_topic_id` (`parent_topic_id`),
  KEY `idx_topic_level` (`topic_level`),
  KEY `idx_is_sticky` (`is_sticky`),
  KEY `idx_status` (`status`),
  KEY `idx_sort_order` (`sort_order`),
  KEY `idx_recommend_weight` (`recommend_weight`),
  KEY `idx_last_post_time` (`last_post_time`),
  CONSTRAINT `fk_topics_category` FOREIGN KEY (`category_id`) REFERENCES `circle_category` (`id`) ON DELETE SET NULL,
  CONSTRAINT `fk_topics_circle` FOREIGN KEY (`circle_id`) REFERENCES `circle` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8mb4 COMMENT='圈子主题表'




新建根据圈子类型获取学习榜单接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。
这个接口不需要身份验证，不需要加身份验证的逻辑
CREATE TABLE `circle_rank` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `category_id` bigint(20) NOT NULL COMMENT '圈子分类ID',
  `category_name` varchar(50) NOT NULL COMMENT '圈子分类名称',
  `circle_id` bigint(20) NOT NULL COMMENT '圈子ID',
  `circle_name` varchar(100) NOT NULL COMMENT '圈子名称(冗余)',
  `circle_cover` varchar(255) DEFAULT NULL COMMENT '圈子封面(冗余)',
  `circle_intro` varchar(500) DEFAULT NULL COMMENT '圈子简介(冗余)',
  `author_name` varchar(50) DEFAULT NULL COMMENT '作者名称(冗余)',
  `heat_score` decimal(10,2) DEFAULT '0.00' COMMENT '热度评分',
  `member_count` int(11) DEFAULT '0' COMMENT '成员数量',
  `post_count` int(11) DEFAULT '0' COMMENT '帖子数量',
  `like_count` int(11) DEFAULT '0' COMMENT '点赞数量',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论数量',
  `view_count` int(11) DEFAULT '0' COMMENT '浏览数量',
  `activity_score` decimal(10,2) DEFAULT '0.00' COMMENT '活跃度评分',
  `rank_position` int(11) DEFAULT '0' COMMENT '当前排名位置',
  `rank_change` int(11) DEFAULT '0' COMMENT '排名变化(相比上次)',
  `rank_type` tinyint(4) NOT NULL COMMENT '排行榜类型:1-总榜,2-分类榜,3-新人榜,4-飙升榜等',
  `rank_date` date NOT NULL COMMENT '排行榜日期',
  `rank_time` datetime NOT NULL COMMENT '排行榜生成时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_rank_record` (`circle_id`,`rank_type`,`rank_date`),
  KEY `idx_category` (`category_id`),
  KEY `idx_rank_type` (`rank_type`),
  KEY `idx_rank_date` (`rank_date`),
  KEY `idx_heat_score` (`heat_score`),
  KEY `idx_rank_position` (`rank_position`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='圈子排行榜单表'


新建获取我的圈子列表接口，post方法，返回数据需要按role字段逆序排序，并且需要关联circle表里的字段，响应结果字段参考下表：
CREATE TABLE `circle_members` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `circle_id` bigint(20) NOT NULL COMMENT '圈子ID',
  `user_id` bigint(20) NOT NULL COMMENT '用户ID',
  `join_time` datetime NOT NULL COMMENT '加入时间',
  `role` tinyint(4) NOT NULL DEFAULT '1' COMMENT '用户角色：1-普通成员，2-管理员，3-圈主',
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-已退出，1-正常，2-禁言，3-待审核，4-已封禁',
  `last_active_time` datetime DEFAULT NULL COMMENT '最后活跃时间',
  `expire_time` datetime DEFAULT NULL COMMENT '会员到期时间',
  `join_source` tinyint(4) DEFAULT NULL COMMENT '加入来源：1-搜索，2-邀请，3-推荐，4-系统添加',
  `inviter_id` bigint(20) DEFAULT NULL COMMENT '邀请人ID',
  `points` int(11) DEFAULT '0' COMMENT '圈子积分',
  `level` int(11) DEFAULT '1' COMMENT '会员等级',
  `level_progress` int(11) DEFAULT '0' COMMENT '等级进度',
  `reason_text` varchar(500) DEFAULT NULL COMMENT '封禁原因/审核意见',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_circle_user` (`circle_id`,`user_id`),
  KEY `idx_user_id` (`user_id`),
  KEY `idx_status` (`status`),
  KEY `idx_join_time` (`join_time`),
  KEY `idx_join_source` (`join_source`),
  CONSTRAINT `fk_members_circle` FOREIGN KEY (`circle_id`) REFERENCES `circle` (`id`) ON DELETE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='圈子成员关联表'

CREATE TABLE `circle` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '圈子ID，主键',
  `category_id` bigint(20) NOT NULL COMMENT '圈子分类ID',
  `category_name` varchar(50) NOT NULL COMMENT '圈子分类名称',
  `type` tinyint(4) NOT NULL DEFAULT '1' COMMENT '圈子类型：1-公开，2-私密',
  `name` varchar(100) NOT NULL COMMENT '圈子名称',
  `cover` varchar(255) DEFAULT NULL COMMENT '封面图片URL',
  `introduction` varchar(500) DEFAULT NULL COMMENT '圈子简介',
  `content_description` text COMMENT '内容详细介绍',
  `price` decimal(10,2) DEFAULT '0.00' COMMENT '价格',
  `annual_fee_type` tinyint(4) DEFAULT NULL COMMENT '年费类型：1-免费，2-年费，3-月费，4-一次性付费',
  `create_time` datetime NOT NULL,
  `update_time` datetime NOT NULL,
  `status` tinyint(4) NOT NULL DEFAULT '1' COMMENT '状态：0-禁用，1-正常，2-审核中，3-已删除',
  `author_id` bigint(20) NOT NULL COMMENT '作者ID',
  `author_name` varchar(50) NOT NULL COMMENT '作者名称',
  `member_count` int(11) DEFAULT '0' COMMENT '成员数量（可选）',
  `post_count` int(11) DEFAULT '0' COMMENT '帖子数量（可选）',
  PRIMARY KEY (`id`),
  KEY `idx_category` (`category_id`),
  KEY `idx_author` (`author_id`),
  KEY `idx_status` (`status`),
  KEY `idx_create_time` (`create_time`)
) ENGINE=InnoDB AUTO_INCREMENT=17 DEFAULT CHARSET=utf8mb4 COMMENT='圈子表'


发布帖子的页面http://localhost:5173/publish，发布到哪个圈子这个下拉框需要显示我创建的和我加入的圈子列表，参考我的圈子页面获取我创建的和我加入的圈子列表


1. 新建获取圈子排行榜单接口
新建获取圈子排行榜单接口，post方法，接口写完后，告诉我四大元素，接口地址、请求方法、请求参数、返回结果，数据结构用json。
这个接口不需要身份验证，不需要加身份验证的逻辑
响应结果返回的字段，可以参考这个表结构
CREATE TABLE `circle_rank` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT COMMENT '主键ID',
  `category_id` bigint(20) NOT NULL COMMENT '圈子分类ID',
  `category_name` varchar(50) NOT NULL COMMENT '圈子分类名称',
  `circle_id` bigint(20) NOT NULL COMMENT '圈子ID',
  `circle_name` varchar(100) NOT NULL COMMENT '圈子名称(冗余)',
  `circle_cover` varchar(255) DEFAULT NULL COMMENT '圈子封面(冗余)',
  `circle_intro` varchar(500) DEFAULT NULL COMMENT '圈子简介(冗余)',
  `author_name` varchar(50) DEFAULT NULL COMMENT '作者名称(冗余)',
  `heat_score` decimal(10,2) DEFAULT '0.00' COMMENT '热度评分',
  `member_count` int(11) DEFAULT '0' COMMENT '成员数量',
  `post_count` int(11) DEFAULT '0' COMMENT '帖子数量',
  `like_count` int(11) DEFAULT '0' COMMENT '点赞数量',
  `comment_count` int(11) DEFAULT '0' COMMENT '评论数量',
  `view_count` int(11) DEFAULT '0' COMMENT '浏览数量',
  `activity_score` decimal(10,2) DEFAULT '0.00' COMMENT '活跃度评分',
  `rank_position` int(11) DEFAULT '0' COMMENT '当前排名位置',
  `rank_change` int(11) DEFAULT '0' COMMENT '排名变化(相比上次)',
  `rank_type` tinyint(4) NOT NULL COMMENT '排行榜类型:1-总榜,2-分类榜,3-新人榜,4-飙升榜等',
  `rank_date` date NOT NULL COMMENT '排行榜日期',
  `rank_time` datetime NOT NULL COMMENT '排行榜生成时间',
  PRIMARY KEY (`id`),
  UNIQUE KEY `uk_rank_record` (`circle_id`,`rank_type`,`rank_date`),
  KEY `idx_category` (`category_id`),
  KEY `idx_rank_type` (`rank_type`),
  KEY `idx_rank_date` (`rank_date`),
  KEY `idx_heat_score` (`heat_score`),
  KEY `idx_rank_position` (`rank_position`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8mb4 COMMENT='圈子排行榜单表'

solo模式下，如果后端项目接口已存在的情况下：
整理所有实现的接口，列出接口到一个新的接口文档里，列出每个接口的四大要素，请求地址、请求方法、请求参数、返回结果，数据结构用json，并且json里需要加上业务字段的注释。

参考接口文档，对接系统里所有页面需要的接口，不要修改页面上的表单字段，尽量用接口里的字段，接口里缺少的字段先在页面显示默认值，接口请求失败的时候不要用模拟接口返回假数据，保证数据都是调用接口渲染到页面的，接口出错或者没有数据要提示暂无数据，不要以假乱真


## 测试后台接口
我们用apifox或者postman测试接口工具
测试接口以后是不是返回了接口数据




## 对接后台接口

注册页面需要对接注册接口，只需要用到页面上的字段，不需要把所有请求参数字段加到已经存在的注册页面，不要加模拟注册功能影响正常功能，post请求，
注册成功后跳转到登录页面，
接口地址：http://192.168.31.120:4000/api/users/register，
请求参数：
{
  "username": "huangxiaoyu",
  "email": "sdfewfsdf@qq.com",
  "password": "12345678",
  "mobile": "15555551111",
  "nickname": "",
  "bio": "",
  "gender": "0",
  "birthday": "2020-02-10"
}，
响应结果：
{
    "code": 200,
    "message": "用户注册成功",
    "data": {
        "user_id": 40,
        "username": "huangxiaoyu",
        "email": "sdfewfsdf@qq.com",
        "mobile": "15555551111",
        "nickname": "",
        "gender": "0",
        "birthday": "2020-02-10",
        "bio": ""
    }
}


注意：
遇到问题以后得解决提示词：
（如果是f12调试时候console的错误，一定要把小箭头点开，把所有错误信息发给AI）
注册页面点击注册接口调用成功了，{
    "status": "success",
    "message": "用户注册成功",
    "data": {
        "user_id": 20,
        "username": "rousey",
        "email": "rousey@qq.com",
        "nickname": "rousey"
    }
}，但是页面提示注册失败，请检查网络连接。注册成功以后，跳转到登录页面。



登录页面需要对接会员用户登录接口，post请求，
登录成功后跳转到首页，并且首页右上角登录按钮和注册按钮需要隐藏，显示用户头像和昵称
接口地址：http://192.168.31.120:4000/api/user/login，
请求参数：
{
  "username": "xiaoqi",
  "password": "x12345678"
}
响应结果：
{
    "success": true,
    "message": "登录成功",
    "data": {
        "userId": 48,
        "username": "xiaoqi",
        "email": "xiaoqi@qq.com",
        "nickname": "小齐",
        "avatar": null,
        "gender": 0,
        "bio": "个人简介，选填",
        "role": 1,
        "status": 1,
        "isVerified": 0,
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjQ4LCJ1c2VybmFtZSI6InhpYW9xaSIsImVtYWlsIjoieGlhb3FpQHFxLmNvbSIsInJvbGUiOjEsImlhdCI6MTc1MzgwMTE1NSwiZXhwIjoxNzUzODg3NTU1fQ.txuM70otJWWdxsDAzBz2dOJak4_Wr9VW52ut0t3ZKK4"
    }
}



后台管理平台登录页面需要对接管理员用户登录接口，不要加模拟登录功能影响正常功能，post请求，
登录成功后跳转到首页，并且首页右上角登录按钮和注册按钮需要隐藏，显示用户头像和昵称
接口地址：http://192.168.31.120:4000/admin/login
请求参数：
{
  "username": "admin", // 登录用户名，字符串，必填
  "password": "Admin123"  // 登录密码，字符串，必填
}
响应结果：
{
    "success": true,
    "message": "登录成功",
    "data": {
        "admin": {
            "id": 1,
            "username": "admin",
            "real_name": "系统管理员",
            "mobile": "13800138000",
            "email": "admin@example.com",
            "role_type": "super",
            "last_login_time": "2025-07-27T15:12:46.000Z"
        },
        "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsInJvbGVfdHlwZSI6InN1cGVyIiwiaXNfYWRtaW4iOnRydWUsImlhdCI6MTc1MzYyOTc3NCwiZXhwIjoxNzU0MjM0NTc0fQ.6GIkU5dENQwETgXqcpfl7f7z8V02WhIyU7-ugFuBZXw"
    }
}


后台管理系统点击左侧广告位管理的按钮，打开的广告位管理页面需要对接管理员用户获取广告位接口，post请求，接口地址：http://192.168.31.120:4000/admin/ad-positions
请求的Header要有Authorization参数，参数值参考：Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTMsInVzZXJuYW1lIjoid2FuZyIsImVtYWlsIjoiYXNmZXdmQHFxLmNvbSIsInJvbGUiOjEsImlhdCI6MTc1MDE3NDM5NywiZXhwIjoxNzUwNzc5MTk3fQ.ANNSwya0TVLgqN3j971zhsu1ttK8jUrsBo9SbzSTNxQ
，请求参数：
{
  "page": 1,           // 页码，可选，默认为1
  "limit": 10,         // 每页数量，可选，默认为10
  "platform": "web",   // 平台类型，可选，枚举值：all, android, ios, web
  "status": 1,         // 状态，可选，0-禁用, 1-启用, 2-维护中
  "style_type": "image" // 广告样式，可选，如：image, video, text等
}
响应结果：
{
    "success": true,
    "message": "获取广告位列表成功",
    "data": [
        {
            "id": 2,
            "position_code": "ARTICLE_FOOTER_WEB",
            "position_name": "文章底部广告(Web)",
            "width": 728,
            "height": 90,
            "description": "文章内容结束后的横幅广告位",
            "platform": "web",
            "location": "知识文章页-内容底部",
            "status": 1,
            "max_count": 1,
            "style_type": "image",
            "create_time": "2025-07-27T15:51:51.000Z",
            "update_time": "2025-07-27T15:51:51.000Z",
            "operator_id": null
        }
    ],
    "pagination": {
        "page": 1,
        "limit": 10,
        "total": 1,
        "totalPages": 1
    }
}



创建圈子页面需要对接新增圈子的接口，post请求，接口地址：http://192.168.31.120:3000/api/circles/create，
请求的Header要有Authorization参数，参数值参考：Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTMsInVzZXJuYW1lIjoid2FuZyIsImVtYWlsIjoiYXNmZXdmQHFxLmNvbSIsInJvbGUiOjEsImlhdCI6MTc1MDE3NDM5NywiZXhwIjoxNzUwNzc5MTk3fQ.ANNSwya0TVLgqN3j971zhsu1ttK8jUrsBo9SbzSTNxQ
，请求参数：
{
  "category_id": 1,
  "category_name": "科技",
  "type": 1,
  "name": "AI技术交流圈",
  "cover": "https://example.com/cover.jpg",
  "introduction": "这是一个关于人工智能技术的交流圈子",
  "content_description": "这里我们将深入讨论机器学习、深度学习等各种AI技术...",
  "price": 0.00,
  "annual_fee_type": 1,
  "status": 1
}
响应结果：
{
    "message": "创建圈子成功",
    "data": {
        "create_time": "2025-06-17T15:37:50.188Z",
        "update_time": "2025-06-17T15:37:50.188Z",
        "id": 11,
        "category_id": 1,
        "category_name": "科技",
        "type": 1,
        "name": "AI技术交流圈",
        "cover": "https://example.com/cover.jpg",
        "introduction": "这是一个关于人工智能技术的交流圈子",
        "content_description": "这里我们将深入讨论机器学习、深度学习等各种AI技术...",
        "price": 0,
        "annual_fee_type": 1,
        "status": 1,
        "author_id": 13,
        "author_name": "wang",
        "member_count": 0,
        "post_count": 0
    }
}


发布内容页面，http://localhost:5173/publish，需要对接新增帖子（话题）的接口，post请求，接口地址：http://192.168.31.120:3000/api/circles/topics/create，
请求的Header要有Authorization参数，参数值参考：Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTMsInVzZXJuYW1lIjoid2FuZyIsImVtYWlsIjoiYXNmZXdmQHFxLmNvbSIsInJvbGUiOjEsImlhdCI6MTc1MDE3NDM5NywiZXhwIjoxNzUwNzc5MTk3fQ.ANNSwya0TVLgqN3j971zhsu1ttK8jUrsBo9SbzSTNxQ
，请求参数：
{
  "circle_id": 22,                 // 所属圈子ID（必填）
  "category_id": 2,              // 关联的圈子分类ID（可选）
  "topic_name": "话题名称",      // 主题名称（必填，最大100字符）
  "topic_description": "描述",   // 主题描述（可选，最大500字符）
  "topic_icon": "图标URL",       // 主题图标URL（可选）
  "parent_topic_id": null,       // 父主题ID，支持主题嵌套（可选）
  "topic_level": 1,              // 主题级别：1-普通，2-精华，3-置顶精华（默认1）
  "topic_content": "内容",       // 主题内容（必填）
  "is_sticky": false,            // 是否置顶：false-否，true-是（默认false）
  "sticky_expire_time": null,    // 置顶过期时间（可选，ISO格式日期）
  "sort_order": 0,               // 排序权重（默认0）
  "recommend_weight": 0,         // 推荐权重（人工干预值，默认0）
  "status": 1                    // 状态：0-禁用，1-启用，2-热门，3-推荐（默认1）
}
响应结果：
{
  "message": "创建话题成功",
  "data": {
    "id": 46,                     // 主题ID
    "circle_id": 1,               // 所属圈子ID
    "category_id": 2,             // 关联的圈子分类ID
    "topic_name": "话题名称",     // 主题名称
    "topic_description": "描述",  // 主题描述
    "topic_icon": "图标URL",      // 主题图标URL
    "parent_topic_id": null,      // 父主题ID（支持主题嵌套）
    "topic_level": 1,             // 主题级别：1-普通，2-精华，3-置顶精华
    "topic_content": "内容",      // 主题内容
    "is_sticky": false,           // 是否置顶：false-否，true-是
    "sticky_expire_time": null,   // 置顶过期时间
    "sort_order": 0,              // 排序权重
    "recommend_weight": 0,        // 推荐权重（人工干预值）
    "post_count": 0,              // 主题下帖子数量
    "view_count": 0,              // 主题总浏览量
    "follower_count": 0,          // 关注人数
    "last_post_time": "2023-09-01T12:00:00.000Z", // 最后发帖时间
    "status": 1,                  // 状态：0-禁用，1-启用，2-热门，3-推荐
    "create_time": "2023-09-01T12:00:00.000Z",   // 创建时间
    "update_time": "2023-09-01T12:00:00.000Z",   // 更新时间
    "creator_id": 1,              // 创建人ID
    "last_editor_id": 1           // 最后编辑人ID
  }
}


我的圈子页面，http://localhost:5173/my-circles，需要对接根据圈子ID获取圈子话题列表接口，post请求，接口地址：http://localhost:3000/api/circles/topics/list，
请求参数：
{
  "circle_id": 22,                 /* 圈子ID（必填） */
  "page": 1,                     /* 页码，默认为1 */
  "pageSize": 10                /* 每页数量，默认为10，最大100 */
}
响应结果：
{
  "message": "获取圈子话题列表成功",
  "data": {
    "circle": {
      "id": 1,                    /* 圈子ID */
      "name": "圈子名称",          /* 圈子名称 */
      "cover": "圈子封面URL",      /* 圈子封面URL */
      "category_id": 2,           /* 圈子分类ID */
      "category_name": "分类名称"   /* 圈子分类名称 */
    },
    "topics": [
      {
        "id": 1,                  /* 主题ID */
        "circle_id": 1,           /* 所属圈子ID */
        "category_id": 2,          /* 关联的圈子分类ID */
        "topic_name": "话题名称",   /* 主题名称 */
        "topic_description": "话题描述", /* 主题描述 */
        "topic_icon": "话题图标URL", /* 主题图标URL */
        "parent_topic_id": null,    /* 父主题ID（支持主题嵌套） */
        "topic_level": 1,           /* 主题级别：1-普通，2-精华，3-置顶精华 */
        "topic_content": "话题内容", /* 主题内容 */
        "is_sticky": 0,             /* 是否置顶：0-否，1-是 */
        "sticky_expire_time": null,  /* 置顶过期时间 */
        "sort_order": 0,            /* 排序权重 */
        "recommend_weight": 0,       /* 推荐权重（人工干预值） */
        "post_count": 0,            /* 主题下帖子数量 */
        "view_count": 0,            /* 主题总浏览量 */
        "follower_count": 0,        /* 关注人数 */
        "last_post_time": "2023-01-01T00:00:00.000Z", /* 最后发帖时间 */
        "status": 1,                /* 状态：0-禁用，1-启用，2-热门，3-推荐 */
        "create_time": "2023-01-01T00:00:00.000Z", /* 创建时间 */
        "update_time": "2023-01-01T00:00:00.000Z", /* 更新时间 */
        "creator_id": 1,            /* 创建人ID */
        "last_editor_id": 1,        /* 最后编辑人ID */
        "creator": {
          "user_id": "user123",     /* 用户ID */
          "username": "username",    /* 用户名 */
          "nickname": "昵称",        /* 昵称 */
          "avatar_url": "头像URL"    /* 头像URL */
        }
      }
      // 更多话题...
    ],
    "pagination": {
      "total": 100,               /* 总记录数 */
      "page": 1,                  /* 当前页码 */
      "pageSize": 10,             /* 每页数量 */
      "totalPages": 10            /* 总页数 */
    }
  }
}


圈子详情页面，http://localhost:5173/circles/2，需要对接获取圈子详情接口，post请求，接口地址：http://192.168.31.120:3000/api/circles/detail，
请求参数：
{
   "id" : 2
}
响应结果：
{
    "message": "获取圈子详情成功",
    "success": true,
    "data": {
        "circle": {
            "id": 2,
            "category_id": 2,
            "category_name": "教育",
            "type": 1,
            "name": "英语学习圈",
            "cover": "https://picsum.photos/300/200?random=2",
            "introduction": "每日英语学习打卡",
            "content_description": "提供英语学习资源，每日打卡，互相监督，共同进步。包含四六级、雅思、托福等考试资料。",
            "price": "99.00",
            "annual_fee_type": 2,
            "create_time": "2023-02-10T14:00:00.000Z",
            "update_time": "2023-06-18T08:15:00.000Z",
            "status": 1,
            "author_id": 13,
            "author_name": "李老师",
            "member_count": 876,
            "post_count": 521
        },
        "featuredTopics": [
            
            {
                "id": 38,
                "circle_id": 2,
                "category_id": 5,
                "topic_name": "器材讨论",
                "topic_description": "相机、镜头等摄影器材评测",
                "topic_icon": null,
                "parent_topic_id": null,
                "topic_level": 2,
                "topic_content": "这里是摄影器材爱好者的天地！讨论各类相机、镜头、三脚架等摄影装备的性能、优缺点、选购建议以及使用经验分享。",
                "is_sticky": false,
                "sticky_expire_time": null,
                "sort_order": 90,
                "recommend_weight": 180,
                "post_count": 380,
                "view_count": 16000,
                "follower_count": 320,
                "last_post_time": "2023-06-18T16:30:00.000Z",
                "status": 1,
                "create_time": "2023-02-01T10:10:00.000Z",
                "update_time": "2023-06-18T16:30:00.000Z",
                "creator_id": 2003,
                "last_editor_id": 2003
            }
        ],
        "benefits": [
           
            {
                "id": 6,
                "circle_id": 2,
                "benefit_name": "作品点评",
                "description": "专业摄影师一对一作品点评",
                "sort_order": 1,
                "create_time": "2025-06-27T10:33:05.000Z",
                "update_time": "2025-06-27T10:33:05.000Z"
            }
        ],
        "rules": [
           
            {
                "id": 3,
                "circle_id": 2,
                "title": "新人指南",
                "content": "新成员请先阅读本指南了解社区规范",
                "sort_order": 0,
                "status": 1,
                "create_time": "2024-06-10T11:05:33.000Z",
                "update_time": "2024-06-15T16:20:18.000Z",
                "created_by": 1002
            }
        ],
        "creator": {
            "user_id": 13,
            "username": "wang@qq.com",
            "nickname": "afasdfasdf",
            "avatar_url": null,
            "email": "asfewf@qq.com",
            "mobile": null,
            "gender": 1,
            "birthday": null,
            "bio": null,
            "role": 1,
            "status": 1,
            "register_time": "2025-06-13T14:39:06.000Z"
        }
    }
}

先选中要切换的tab代码：
切换tab时，需要对接根据圈子ID获取圈子话题列表接口，post请求，接口地址：http://localhost:3000/api/circles/topics/list，
请求参数：
{
  "circle_id": 22,                /* 圈子ID（必填） */
  "page": 1,                    /* 页码，默认为1 */
  "pageSize": 10,               /* 每页数量，默认为10，最大100 */
  "sort_type": "latest",        /* 排序类型：latest-最新(默认)，hot-热门，featured-精华 */
  "status": 1,                  /* 状态：0-禁用，1-启用(默认)，2-热门，3-推荐 */
  "topic_level": 1,          /* 话题级别：1-普通，2-精华，3-置顶精华，可选 */
  "is_sticky": false             /* 是否置顶：true-是，false-否，可选 */
}
响应结果：
{
    "message": "获取圈子话题列表成功",
    "data": {
        "circle": {
            "id": 22,
            "name": "如人饮水",
            "cover": "https://picsum.photos/100/100?random=10",
            "category_id": 1,
            "category_name": "科技"
        },
        "topics": [
           
            {
                "id": 46,
                "circle_id": 22,
                "category_id": 2,
                "topic_name": "话题名称",
                "topic_description": "描述",
                "topic_icon": "图标URL",
                "parent_topic_id": null,
                "topic_level": 1,
                "topic_content": "内容",
                "is_sticky": false,
                "sticky_expire_time": null,
                "sort_order": 0,
                "recommend_weight": 0,
                "post_count": 0,
                "view_count": 0,
                "follower_count": 0,
                "last_post_time": "2025-07-25T11:00:49.000Z",
                "status": 1,
                "create_time": "2025-07-25T11:00:49.000Z",
                "update_time": "2025-07-25T11:00:49.000Z",
                "creator_id": 13,
                "last_editor_id": 13,
                "creator": {
                    "user_id": 13,
                    "username": "wang@qq.com",
                    "nickname": "afasdfasdf",
                    "avatar_url": null
                }
            }
        ],
        "pagination": {
            "total": 2,
            "page": 1,
            "pageSize": 10,
            "totalPages": 1
        }
    }
}


圈子详情页面，http://localhost:5173/circles/2，需要对接加入圈子接口，post请求，接口地址：http://192.168.31.120:3000/api/circles/join，
请求参数：
{
  "circle_id": 26,                 // 圈子ID（必填）
  "join_source": 1,              // 加入来源：1-搜索，2-邀请，3-推荐，4-系统添加（选填，默认1）
  "inviter_id": null,            // 邀请人ID（选填）
  "reason_text": ""              // 加入理由/申请说明（选填）
}
响应结果：
{
    "message": "加入圈子成功",
    "data": {
        "id": 12,
        "circle_id": 26,
        "user_id": 13,
        "join_time": "2025-07-26T12:37:53.098Z",
        "role": 1,
        "status": 1
    }
}

圈子详情页面，http://localhost:5173/circles/2，需要对接退出圈子接口，post请求，接口地址：http://192.168.31.120:3000/api/circles/leave，
请求参数：
{
  "circle_id": 26,           // 圈子ID，必填，正整数
  "reason_text": "个人原因"  // 退出原因，选填，最大500字符
}
响应结果：
{
    "message": "退出圈子成功",
    "data": {
        "id": 12,
        "circle_id": 26,
        "user_id": 13,
        "status": 0,
        "leave_time": "2025-07-27T03:59:04.022Z"
    }
}


圈子详情页面，http://localhost:5173/circles/2，需要调用我的圈子列表接口，排除我是圈主状态的圈子（role:用户角色：1-普通成员，2-管理员，3-圈主），判断当前圈子我是否已经加入，post请求，接口地址：http://192.168.31.120:3000/api/circles/my，
请求参数：
{
  "page": 1,                 // 页码，默认为1
  "pageSize": 50,           // 每页数量，默认为10
}
响应结果：
{
    "message": "获取我的圈子列表成功",
    "data": {
        "circles": [
            {
                "id": 9,
                "circle_id": 25,
                "user_id": 13,
                "join_time": "2025-07-26T10:50:33.000Z",
                "role": 3,
                "status": 1,
                "last_active_time": "2025-07-26T10:50:33.000Z",
                "expire_time": null,
                "join_source": 4,
                "inviter_id": null,
                "points": 0,
                "level": 1,
                "level_progress": 0,
                "reason_text": null,
                "circle": {
                    "id": 25,
                    "name": "AI编程好牛",
                    "cover": "",
                    "introduction": "AI编程好牛AI编程好牛AI编程好牛",
                    "type": 1,
                    "category_id": 1,
                    "category_name": "技术",
                    "price": "0.00",
                    "annual_fee_type": 1,
                    "member_count": 1,
                    "post_count": 1,
                    "author_id": 13,
                    "author_name": "wang@qq.com"
                }
            },
            {
                "id": 13,
                "circle_id": 27,
                "user_id": 13,
                "join_time": "2025-07-26T12:51:18.000Z",
                "role": 1,
                "status": 1,
                "last_active_time": "2025-07-26T12:51:18.000Z",
                "expire_time": null,
                "join_source": 1,
                "inviter_id": null,
                "points": 0,
                "level": 1,
                "level_progress": 0,
                "reason_text": "",
                "circle": {
                    "id": 27,
                    "name": "bushiba",
                    "cover": "",
                    "introduction": "bushibabushibabushibabushiba",
                    "type": 1,
                    "category_id": 2,
                    "category_name": "设计",
                    "price": "0.00",
                    "annual_fee_type": 1,
                    "member_count": 2,
                    "post_count": 0,
                    "author_id": 42,
                    "author_name": "laowang"
                }
            }
        ],
        "pagination": {
            "total": 3,
            "page": 1,
            "pageSize": 50,
            "totalPages": 1
        }
    }
}




首页热门圈子推荐模块，需要对接获取热门圈子推荐列表接口，post请求，接口地址：http://192.168.31.120:4000/api/circle/hot-recommend，
请求参数：
{
  "rankType": "1",
  "categoryId": "",
  "page": "1",
  "pageSize": "10"
}
响应结果：
{
    "success": true,
    "message": "获取热门圈子列表成功",
    "data": [
        {
            "id": 1,
            "categoryId": 1,
            "categoryName": "技术",
            "circleId": 101,
            "circleName": "JavaScript学习圈",
            "circleCover": "https://example.com/covers/js.png",
            "circleIntro": "专注于JavaScript技术学习与分享",
            "authorName": "技术大牛",
            "heatScore": 98.5,
            "memberCount": 1250,
            "postCount": 325,
            "likeCount": 4280,
            "commentCount": 2150,
            "viewCount": 15800,
            "activityScore": 92.3,
            "rankPosition": 1,
            "rankChange": 0,
            "rankType": 1,
            "rankDate": "2025-07-28T16:00:00.000Z"
        },
        {
            "id": 2,
            "categoryId": 1,
            "categoryName": "技术",
            "circleId": 102,
            "circleName": "Python爱好者",
            "circleCover": "https://example.com/covers/python.png",
            "circleIntro": "Python编程技术交流与学习",
            "authorName": "蟒蛇大师",
            "heatScore": 95.2,
            "memberCount": 980,
            "postCount": 280,
            "likeCount": 3850,
            "commentCount": 1920,
            "viewCount": 12500,
            "activityScore": 89.7,
            "rankPosition": 2,
            "rankChange": 1,
            "rankType": 1,
            "rankDate": "2025-07-28T16:00:00.000Z"
        },
        {
            "id": 3,
            "categoryId": 2,
            "categoryName": "设计",
            "circleId": 201,
            "circleName": "UI设计师联盟",
            "circleCover": "https://example.com/covers/ui.png",
            "circleIntro": "分享UI设计经验与作品",
            "authorName": "设计达人",
            "heatScore": 94.8,
            "memberCount": 850,
            "postCount": 210,
            "likeCount": 3200,
            "commentCount": 1680,
            "viewCount": 11200,
            "activityScore": 88.5,
            "rankPosition": 3,
            "rankChange": -1,
            "rankType": 1,
            "rankDate": "2025-07-28T16:00:00.000Z"
        },
        {
            "id": 4,
            "categoryId": 3,
            "categoryName": "生活",
            "circleId": 301,
            "circleName": "美食爱好者",
            "circleCover": "https://example.com/covers/food.png",
            "circleIntro": "分享美食制作与探店经验",
            "authorName": "吃货联盟",
            "heatScore": 92.1,
            "memberCount": 1580,
            "postCount": 420,
            "likeCount": 5100,
            "commentCount": 2800,
            "viewCount": 18500,
            "activityScore": 90.2,
            "rankPosition": 4,
            "rankChange": 2,
            "rankType": 1,
            "rankDate": "2025-07-28T16:00:00.000Z"
        },
        {
            "id": 5,
            "categoryId": 4,
            "categoryName": "教育",
            "circleId": 401,
            "circleName": "考研交流",
            "circleCover": "https://example.com/covers/edu.png",
            "circleIntro": "考研经验分享与资料交流",
            "authorName": "研路同行",
            "heatScore": 90.5,
            "memberCount": 2100,
            "postCount": 380,
            "likeCount": 4800,
            "commentCount": 2500,
            "viewCount": 22000,
            "activityScore": 87.8,
            "rankPosition": 5,
            "rankChange": 0,
            "rankType": 1,
            "rankDate": "2025-07-28T16:00:00.000Z"
        }
    ],
    "pagination": {
        "total": 5,
        "page": "1",
        "pageSize": "10",
        "totalPages": 1
    }
}


首页热门话题模块，需要对接获取热门圈子推荐列表接口，post请求，接口地址：http://localhost:3000/api/circles/topics/hot，
请求参数：
{
  "page": 1,                  // 页码，默认为1
  "pageSize": 10,            // 每页数量，默认为10，最大100
  "status": 1,               // 话题状态：0-禁用，1-启用，2-热门，3-推荐，默认为1
}
响应结果：
{
  "message": "获取热门话题列表成功",
  "data": {
    "topics": [
      {
        "id": 1,                      // 主题ID
        "circle_id": 1,               // 所属圈子ID
        "category_id": 1,             // 关联的圈子分类ID
        "topic_name": "话题名称",      // 主题名称
        "topic_description": "描述",   // 主题描述
        "topic_icon": "图标URL",       // 主题图标URL
        "parent_topic_id": null,       // 父主题ID
        "topic_level": 1,              // 主题级别：1-普通，2-精华，3-置顶精华
        "topic_content": "内容",       // 主题内容
        "is_sticky": false,            // 是否置顶：false-否，true-是
        "sticky_expire_time": null,    // 置顶过期时间
        "sort_order": 100,             // 排序权重
        "recommend_weight": 50,         // 推荐权重
        "post_count": 10,              // 主题下帖子数量
        "view_count": 1000,            // 主题总浏览量
        "follower_count": 5,           // 关注人数
        "last_post_time": "2023-05-01T12:00:00Z", // 最后发帖时间
        "status": 1,                   // 状态：0-禁用，1-启用，2-热门，3-推荐
        "create_time": "2023-04-01T10:00:00Z",    // 创建时间
        "update_time": "2023-04-30T15:30:00Z",    // 更新时间
        "creator_id": 101,             // 创建人ID
        "last_editor_id": 102,         // 最后编辑人ID
        "circle": {                     // 关联的圈子信息
          "id": 1,                     // 圈子ID
          "name": "圈子名称",           // 圈子名称
          "cover": "封面URL",           // 圈子封面
          "category_id": 1,            // 圈子分类ID
          "category_name": "分类名称"    // 圈子分类名称
        }
      }
      // 更多话题...
    ],
    "pagination": {
      "total": 100,           // 总记录数
      "page": 1,              // 当前页码
      "pageSize": 10,         // 每页数量
      "totalPages": 10        // 总页数
    }
  }
}

我的圈子列表模块，需要对接获取我的圈子列表接口，post请求，接口地址：http://192.168.31.120:3000/api/circles/my，
请求参数：
{
    "page": 1,
    "pageSize": 10
  }
响应结果：
{
    "message": "获取我的圈子列表成功",
    "data": {
        "circles": [
            
            {
                "id": 1,
                "circle_id": 17,
                "user_id": 13,
                "join_time": "2025-07-12T03:50:09.000Z",
                "role": 3,
                "status": 1,
                "last_active_time": "2025-07-12T03:50:09.000Z",
                "expire_time": null,
                "join_source": 4,
                "inviter_id": null,
                "points": 0,
                "level": 1,
                "level_progress": 0,
                "reason_text": null,
                "circle": {
                    "id": 17,
                    "name": "asdfasdfasdfasdf",
                    "cover": "https://picsum.photos/100/100?random=10",
                    "introduction": "这是一个新的圈子",
                    "type": 1,
                    "category_id": 1,
                    "category_name": "科技",
                    "price": "50.00",
                    "annual_fee_type": 1,
                    "member_count": 1,
                    "post_count": 0,
                    "author_id": 13,
                    "author_name": "wang@qq.com"
                }
            }
        ],
        "pagination": {
            "total": 2,
            "page": 1,
            "pageSize": 10,
            "totalPages": 1
        }
    }
}



首页圈子分类模块，需要调用获取圈子分类接口，
接口地址：http://192.168.31.120:3000/api/circles/categories，
这个接口是post请求，
请求参数：{
  "parent_id": 0,
  "status": 1,
  "level": 1,
  "is_tree": true
}
响应结果：
{
    "message": "获取圈子分类列表成功",
    "data": [
       
        {
            "id": 5,
            "name": "健康",
            "description": "身心健康，养生之道",
            "icon": "https://example.com/icons/health.png",
            "cover_image": "https://example.com/covers/health.jpg",
            "parent_id": 0,
            "level": 1,
            "sort_order": 60,
            "status": 1,
            "circle_count": 10,
            "created_at": "2025-06-16T22:55:04.000Z",
            "updated_at": "2025-06-16T22:55:04.000Z",
            "created_by": 1,
            "updated_by": null,
            "is_deleted": 0,
            "children": []
        }
    ]
}


首页需要根据圈子类型获取学习榜单接口，接口地址：http://192.168.31.120:3000/api/circles/rank?category_id=1，这个接口是get请求，
响应结果：{
    "message": "获取圈子学习榜单成功",
    "data": {
        "circles": [
            {
                "id": 1,
                "category_id": 1,
                "category_name": "科技",
                "circle_id": 101,
                "circle_name": "AI技术前沿",
                "circle_cover": "https://example.com/covers/ai-tech.jpg",
                "circle_intro": "人工智能技术交流",
                "author_name": "张教授",
                "heat_score": "98.50",
                "member_count": 3200,
                "post_count": 850,
                "like_count": 12500,
                "comment_count": 4200,
                "view_count": 85600,
                "activity_score": "95.20",
                "rank_position": 1,
                "rank_change": 1,
                "rank_type": 1,
                "rank_date": "2023-06-25",
                "rank_time": "2023-06-25T09:00:00.000Z"
            }
        ],
        "pagination": {
            "total": 1,
            "page": 1,
            "pageSize": 10,
            "totalPages": 1
        }
    }
}

